
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="../../favicon.ico">

    <title>YoutubeSync</title>

    <!-- Bootstrap core CSS -->
    <link href="css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="css/main.css" rel="stylesheet">

  </head>

  <body>

    <nav class="navbar navbar-inverse navbar-fixed-top">

      <div class="container">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
           <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            
          </button>
          <a class="navbar-brand" href="#">YoutubeSync Web App</a>
      <div>
        <div id="navbar" class="collapse navbar-collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#one">Button1</a></li>
            <li><a href="#two">Button2</a></li>
            <li><a href="#three">Button3</a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>

<div class="container">

    <!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>

    <div id="controls">
        <button id="playVideo" type="button" class="btn btn-default" aria-label="Left Align">
            <span class="glyphicon glyphicon-play" aria-hidden="true"></span>
          </button>
        <button id="pauseVideo" type="button" class="btn btn-default" aria-label="Left Align">
            <span class="glyphicon glyphicon-pause" aria-hidden="true"></span> 
          </button>
          
          <div class="progressBar" style="width: 600px; height: 37px;  margin-left:10px; float: left;">
              <div id="square" style="height: 15px;width: 15px;position: relative;border-width: 2px; border-style: solid;
              top: 8.5px; left: 0%; "></div>
              <div id="line" style="border-style:solid; top: 10%;position: relative; border-width: 1px; background-color: red;"></div>
        
            </div>
    </div>

    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
    <script>window.jQuery || document.write('<script src="js/jquery.min.js"><\/script>')</script>
    <script src="js/bootstrap.min.js"></script>
    <script>
    function initializeBtn(){
      var mydata={state:'play', time:2}
      var playButton=$('#playVideo');
      var pauseButton=$('#pauseVideo');
        
      playButton.click(function(event){
        mydata={state:'play', time: player.getCurrentTime()}
        socket.emit('playerEvent', mydata);
        playVideo()
   
           
});
    pauseButton.click(function(event){
      mydata={state:'pause', time: player.getCurrentTime()}
      socket.emit(mydata);
      pauseVideo()
      //socket.emit('playerEvent',mydata);
    });
    }

    function progressBarLoop(){
      var progressBar=$('.progressBar');
      var progressSquare=$('#square');
      var videoLength= player.getDuration();

      progressBar.click(function(event){
        var divOffset=$(this).offset();
        console.log(divOffset);
        var seekTo=(event.pageX-divOffset.left)/600*videoLength;
        var mydata={state:'play', time:seekTo}
        socket.emit('playerEvent',mydata);
        console.log(seekTo);
      });
      setInterval(function(){
        if(player==null || progressBar==null){
          return;
        
        }
        var fraction=player.getCurrentTime()/player.getDuration()*100;
        progressSquare.css("left", fraction.toString() + "%") ;
      },200);

    }
      
  
</script>

<script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');

    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
      player = new YT.Player('player', {
        height: '480',
        width: '720',
        videoId: 'JpGKWUdRnXE',
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        },
        playerVars:{
          'controls':0,
          'disablekb':1,
          'modestbranding':1,
          'rel':0,
          
          'showinfo':0

        }
        
      });
      
    }

    // 4. The API will call this function when the video player is ready.
    
    function onPlayerReady(event) {
      initializeBtn();

      progressBarLoop();
      event.target.playVideo();
    }

    // 5. The API calls this function when the player's state changes.
    //    The function indicates that when playing a video (state=1),
    //    the player should play for six seconds and then stop.
    var done = false;
    function onPlayerStateChange(event) {
      console.log(event.data);
      console.log(event.target.getCurrentTime());
      if (event.data == YT.PlayerState.PLAYING && !done) {
        setTimeout(stopVideo, 60000);
        done = true;
      }
    }
    function playVideo(){
      player.playVideo();
    }
    function stopVideo() {
      player.stopVideo();
    }
    function pauseVideo(){
      player.pauseVideo();
    }
    function seekTo(seconds){
      player.seekTo(seconds)
    }
  </script>
  <script src="/socket.io/socket.io.js"></script>

<script>

var socket = io();
      
      
  socket.on('playerEvent',function(msg){
      if(msg.state=='play'){
        playVideo()

        if(Math.abs(msg.time-player.getCurrentTime())>1){
          seekTo(msg.time)
        }
          
        }
        else if(msg.time=='pause'){pauseVideo()}
        })
 
   
  </script>

  </body>
</html>
